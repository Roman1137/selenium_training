using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace selenium_training._12_Selenium_Extensions
{
    class Adapters
    {
        //Адаптеры используются для того, чтобы приспособить Selenium к какому - нибудь инструменту более общего назначения,
        //предназначенному для выполнения любых тестов, не только для веб приложений.

        //Инструменты такого рода, как правило имеют высокоуровневый язык для описания сценариев. О таких сценариях говорят как о спецификации.

        //1.Keyword Driver Testing (таблички) - представитель Robot Framework.
        //2.Behavior Driven Development (Gherkin) - Cucumber и его многочисленные клоны (SpecFlow)
        //Говорят, что Gherkin - псевдо естественный язык. Потому, что в нем большинство предложений пишется на человеческом языке,
        //но, там есть небольшое количество ключевых слов(Given, When, Then) и должна соблюдаться определенная структура.

        //1.Robot Framework.
        //Сценарии для этого инструмента пишутся в виде табличек. Это обычный текстовый файл, который имеет определённую структуру.
        //Каждая строчка начинается из так называемого "Ключевого слова" - отсюда и название Keyword Driver Testing. После этого
        //слова указываются какие-то параметры.
        //Реализация - как в обычном языке програмирования, только язык другой. КЛЮЧЕВЫЕ слова, которые используются в Robot Framework можна
        //описывать с помощью Java и Python. Robot Framework умеет работать с Selenium.
        //ВАЖНО: написание сценариев на языке Robot Framework принципиально ничем не отличается от написания сценариев на другом языке.
        //Лучше уж на языке программирования писать...

        //BDD
        //Given a custimer list
        //Given a valid customer
        //When I register the customer
        //Then new customer list cantaion all elements of the old customer list and a new element

        //Каждая фраза реализуется с помощью ЯП. Можно фразу разбить на несколько подфраз.
        //ИТОГ: если нам все равно нужно писать код на языке програмирования, для того, чтобы реализовать все эти шаги, зачем
        //нам тогда язык Gherkin? Действительно, если один и тот же человек пишет и сценарий и код, то ему Gherkin - эти личний геморой.
        //Язык Gherkin по своим возможностям очень бедный и не выразительный по сравнению с настоящим ЯП.
        //НО BDD был придуман для того чтобы НАЛАДИТЬ КОММУНИКАЦИЮ МЕЖДУ людьми, которые пишут спецификацию и теми, которые пишут сценарии -
        //аналитиками или представителями заказчика. Им можна показать сценарий, согласовать все , а может, после некоторого обучения
        //убедить их писать эти сценарии.
        //Написание таких сценариев требует дисциплины. Нельзя просто взять и написать все, что угодно. Оно не будет работать и не получится
        //привязать к ЯП и сделать хорошую реализацию шагов.
    }
}
