using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace selenium_training._11_PageObjects_and_other_design_patterns._003_Alternative_for_PageObjects
{
    class Alternative_for_PageObjects
    {
        //Альтернативные подходы:
        //1.Page Blocks: крупные курси страниц - описаные кусков страниц
        //2.Сервисы: поведение, а не структура - тенденция к описанию поведения, а не струкруры
        //3.Screenplay: виртуальные пользователи - близко к BDD

        //1.Page Blocks:
        //Яркий пример - это административная панель Litecart. Она есть на каждой странице т.к что лучше
        //ее вынести в отельный pageobject.
        //LeftMenu leftMenu = new LeftMenu(driver);
        //leftMenu.Counties[0].Click();
        //Другой яркий пример - это блок из трёх кнопок Save, Cancel, Delete. Этот блок из трёх кнопок
        //появляется на странице создания новой страны, нового клиента и т.д. Вместо того, чтобы локаторы
        //этого блока всключать в список локаторов на каждой странице - вынести этот блок в отдельный контрол.
        //Можно поместить ссылку на этот контрол в каждую страницу, где он находится, а можно прямо
        //в тесте по слабой ссылке сделать так: new ActionPanel(driver).Save(); но лучше, как по мне
        //ссылку в TestInit`e.

        //2.Поведение - это более высокоуровневая штука, по сравнению со струкрутой.
        //Код можно разделить на много-много уровней. Чем сложнее тесты, тем больше уровней нужно.
        //В видео-лекции представлены примеры "низкоуровневого", "среднеуровневого" и "высокоуровневого кода".

        //ScreepPlay(виртуальные пользователи) - связан с тем, как оформляются в тесте проверки.
        //Предлагается, чтобы система(страница) предоставляла методы, для выполнения проверок.
        //Но, как по мне, лучше проверки делать в тестах.Хотя, когда я писал методы на календарь(контрол),
        //там нужно было проверить состояние по-умолчанию и я сделал метод, где скрыл эти все проверки и было очень удобно.
        //Т.е если проверка простая, то  лучше ее делать в тесте, а если она сложная И ОНА ТОЧНО НУЖНА,
        //то лучше создать метод, в котором скроются все проверки.

        //Виртуальный пользователь
        //Application app = new Application();
        //User user = new User("admin", "admin");
        //user.LoginTo(app);
        //AssertTrue(user.IsLoggedInTo(app));
        //С ТЕХНИЧЕСКОЙ ТОЧКИ ЗРЕНИЯ - НИЧЕГО НЕ МЕНЯЕТСЯ.
        //Меняется только логика написания тестов. 
        //Каждому - своё.
    }
}
